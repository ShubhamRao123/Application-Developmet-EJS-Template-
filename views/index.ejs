<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Chart.js Layout with API Data and Grid</title>
    <!-- <link rel="stylesheet" href="/views/Style/Style.css"> -->
    <style>
      body, html {
        margin: 0;
        padding: 0;
        height: 100%;
        font-family: Arial, sans-serif;
      }
      .navbar {
        height: 56px;
        background-color: #333;
        color: white;
        display: flex;
        align-items: center;
        padding: 0 20px;
        position: fixed;
        top: 0;
        width: 100%;
        z-index: 1000; /* Ensures the navbar is above other content */
        
      }
      .sidebar {
        width: 10%;
        background-color: #f8f9fa;
        padding: 10px;
        position: fixed;
        top: 56px; /* Just below the navbar */
        bottom: 0;
        overflow-y: auto; /* Allows scrolling if content exceeds the viewport height */
      }
      .main-content {
        margin-left: 20%;
        margin-top: 56px; /* Space for the fixed navbar */
        padding: 20px;
        height: calc(100vh - 56px); /* Full height minus navbar height */
        overflow-y: auto; /* Allows scrolling if content exceeds viewport height */
        display: flex;
        flex-direction: column; /* Arrange charts and grid in column format */
        gap: 20px; /* Space between charts and grid */
      }
      .chart-container {
        margin-top: 20px;
        flex: 1;
        padding: 10px;
        border: 1px solid #ccc;
        background-color: #fff;
        box-sizing: border-box; /* Ensure padding and border are included in the element's total width and height */
        width: 50%;
      }
      .chart-container h3 {
        text-align: center;
        margin-bottom: 20px;
      }
      canvas {
        width: 100% !important;
        height: 100% !important; /* Ensure full height of the container */
      }
      .grid-container {
        display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); /* Responsive grid layout */
  gap: 20px; /* Space between grid items */
  margin-top: 40px; /
      }
      .grid-item {
        background-color: #f9f9f9;
        padding: 15px;
        border: 1px solid #ddd;
        border-radius: 8px;
        text-align: center;
      }
      .grid-item h4 {
        margin: 0 0 10px 0;
      }
      .grid-item p {
        margin: 0;
      }
    </style>
  </head>
  <body>
    <!-- Top Navbar -->
    <div class="navbar">
      <h2>Header Section</h2>
    </div>

    <!-- Left Sidebar -->
    <div class="sidebar">
      <h3>Sidebar Navigation</h3>
      <ul>
        <li>Home</li>
        <li>About</li>
        <li>Profile</li>
      </ul>
    </div>

    <!-- Main Content Area -->
    <div class="main-content">
      <!-- Row of Charts -->
      <div class="chart-container">
        <h3>Chart 1</h3>
        <canvas id="myChart1"></canvas>
      </div>
      <div class="chart-container">
        <h3>Chart 2</h3>
        <canvas id="myChart2"></canvas>
      </div>

      <!-- Grid Layout for API Data -->
      <div class="grid-container" id="userGrid">
        <!-- API data will be injected here -->
      </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
      // Function to fetch data from an API and update chart
      async function fetchChartData(apiUrl) {
        try {
          const response = await fetch(apiUrl);
          const data = await response.json();
          return data;
        } catch (error) {
          console.error('Error fetching data:', error);
        }
      }

      // Parsing the API data to extract chart-friendly information
      function processUserData(users) {
        const labels = users.map(user => `${user.first_name} ${user.last_name}`); // Names as labels
        const values = users.map(user => user.id); // Use IDs as example data points
        return { labels, values };
      }

      // Chart 1
      fetchChartData('https://reqres.in/api/users').then(data => {
        const users = data.data; // Access the user data from the API response
        const { labels, values } = processUserData(users);

        const ctx1 = document.getElementById('myChart1').getContext('2d');
        const myChart1 = new Chart(ctx1, {
          type: 'bar',
          data: {
            labels: labels, // Names of users
            datasets: [{
              label: 'User IDs',
              data: values, // IDs of users
              backgroundColor: [
                'rgba(255, 99, 132, 0.2)',
                'rgba(54, 162, 235, 0.2)',
                'rgba(255, 206, 86, 0.2)',
                'rgba(75, 192, 192, 0.2)',
                'rgba(153, 102, 255, 0.2)',
                'rgba(255, 159, 64, 0.2)'
              ],
              borderColor: [
                'rgba(255, 99, 132, 1)',
                'rgba(54, 162, 235, 1)',
                'rgba(255, 206, 86, 1)',
                'rgba(75, 192, 192, 1)',
                'rgba(153, 102, 255, 1)',
                'rgba(255, 159, 64, 1)'
              ],
              borderWidth: 1
            }]
          },
          options: {
            scales: {
              y: {
                beginAtZero: true
              }
            }
          }
        });
      });

      // Chart 2
      fetchChartData('https://reqres.in/api/users').then(data => {
        const users = data.data;
        const { labels, values } = processUserData(users);

        const ctx2 = document.getElementById('myChart2').getContext('2d');
        const myChart2 = new Chart(ctx2, {
          type: 'bar',
          data: {
            labels: labels,
            datasets: [{
              label: 'User IDs',
              data: values,
              backgroundColor: [
                'rgba(75, 192, 192, 0.2)',
                'rgba(153, 102, 255, 0.2)',
                'rgba(255, 99, 132, 0.2)',
                'rgba(255, 159, 64, 0.2)',
                'rgba(54, 162, 235, 0.2)'
              ],
              borderColor: [
                'rgba(75, 192, 192, 1)',
                'rgba(153, 102, 255, 1)',
                'rgba(255, 99, 132, 1)',
                'rgba(255, 159, 64, 1)',
                'rgba(54, 162, 235, 1)'
              ],
              borderWidth: 1
            }]
          },
          options: {
            scales: {
              y: {
                beginAtZero: true
              }
            }
          }
        });
      });

      // Fetch user data and populate the grid
      fetchChartData('https://reqres.in/api/users').then(data => {
        const users = data.data;
        const gridContainer = document.getElementById('userGrid');

        users.forEach(user => {
          const userItem = document.createElement('div');
          userItem.classList.add('grid-item');
          userItem.innerHTML = `
            <h4>${user.first_name} ${user.last_name}</h4>
            <p>Email: ${user.email}</p>
            <p>ID: ${user.id}</p>
            <img src="${user.avatar}" alt="Avatar of ${user.first_name}" style="width:50px; height:50px; border-radius:50%;">
          `;
          gridContainer.appendChild(userItem);
        });
      });
    </script>
  </body>
</html>
